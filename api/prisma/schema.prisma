generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SYSTEM_ADMIN
  MANAGER
  GENERAL_EMPLOYEE
}

enum InvitationStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model User {
  id                  String        @id @default(uuid())
  email               String        @unique @db.VarChar(255)
  password            String        @db.VarChar(255)
  role                Role
  profile             Profile?
  companies           CompanyUser[]
  invitationsSent     Invitation[]  @relation("sentInvitations")
  invitationsReceived Invitation[]  @relation("receivedInvitations")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  isActive            Boolean       @default(true)
}

model Profile {
  id             String   @id @default(uuid())
  employeeNumber String   @unique
  department     String   @db.VarChar(255)
  firstName      String   @db.VarChar(255)
  lastName       String   @db.VarChar(255)
  zipCode        String   @db.VarChar(10)
  address        String   @db.VarChar(255)
  phoneNumber    String   @db.VarChar(255)
  birthday       DateTime
  remarks        String?  @db.Text
  profileImage   String?  @db.Text
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Company {
  id                String        @id @default(uuid())
  name              String        @unique @db.VarChar(255)
  zipCode           String        @db.VarChar(10)
  address           String        @db.VarChar(255)
  phoneNumber       String        @db.VarChar(255)
  email             String        @db.VarChar(255)
  website           String?       @db.VarChar(255)
  establishmentDate DateTime
  remarks           String?       @db.Text
  images            String[]
  users             CompanyUser[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  Invitation        Invitation[]
}

model CompanyUser {
  id        String   @id @default(uuid())
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([companyId, userId])
}

model Invitation {
  id            String           @id @default(uuid())
  email         String           @db.VarChar(255)
  token         String           @unique
  role          Role
  status        InvitationStatus @default(PENDING)
  expiresAt     DateTime
  invitedBy     User             @relation("sentInvitations", fields: [invitedById], references: [id])
  invitedById   String
  invitedUser   User?            @relation("receivedInvitations", fields: [invitedUserId], references: [id])
  invitedUserId String?
  company       Company          @relation(fields: [companyId], references: [id])
  companyId     String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  tempPassword  String           @default("") @db.VarChar(255)
}
